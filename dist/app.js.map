{
  "version": 3,
  "sources": ["../src/app.ts"],
  "sourcesContent": ["const letterKeyCoords: Record<string, { leading: Array<{x: number, y: number}>, trailing: Array<{x: number, y: number}> }> = {\n    'capital-a': {\n        leading: [ {x:6.25,y:95}, {x:50,y:50}, {x:95,y:5} ],\n        trailing: [ {x:92.5,y:95}, {x:92.5,y:5}, {x:92.5,y:50} ]\n    },\n    'capital-b': {\n        leading: [ {x:5,y:95}, {x:5,y:50}, {x:5,y:5} ],\n        trailing: [ {x:45,y:95}, {x:45,y:5} ]\n    },\n    'capital-c': {\n        leading: [ {x:20,y:95}, {x:20,y:5} ],\n        trailing: [ {x:40,y:95}, {x:40,y:5} ]\n    },\n    'capital-d': {\n        leading: [ {x:5,y:95}, {x:5,y:5} ],\n        trailing: [ {x:45,y:95}, {x:45,y:5} ]\n    },\n    'capital-e': {\n        leading: [ {x:5,y:95}, {x:5,y:47.5}, {x:5,y:5} ],\n        trailing: [ {x:60,y:95}, {x:60,y:5} ]\n    },\n    'capital-f': {\n        leading: [ {x:5,y:95}, {x:5,y:47.5}, {x:5,y:5} ],\n        trailing: [ {x:60,y:5}, {x:5,y:95} ]\n    },\n    'capital-g': {\n        leading: [ {x:20,y:95}, {x:5,y:55}, {x:20,y:5} ],\n        trailing: [ {x:40,y:95}, {x:40,y:5} ]\n    },\n    'capital-h': {\n        leading: [ {x:5,y:95}, {x:5,y:47.5}, {x:5,y:5} ],\n        trailing: [ {x:60,y:95}, {x:60,y:5}, {x:60,y:47.5} ]\n    },\n    'capital-i': {\n        leading: [ {x:28.5,y:95}, {x:28.5,y:5} ],\n        trailing: [ {x:28.5,y:95}, {x:28.5,y:5} ]\n    },\n    'capital-j': {\n        leading: [ {x:15,y:95}, {x:35,y:70} ],\n        trailing: [ {x:45,y:5}, {x:35,y:95} ]\n    },\n    'capital-k': {\n        leading: [ {x:5,y:95}, {x:5,y:50}, {x:5,y:5} ],\n        trailing: [ {x:46,y:95}, {x:46,y:5} ]\n    },\n    'capital-l': {\n        leading: [ {x:5,y:5}, {x:5,y:95} ],\n        trailing: [ {x:55,y:95} ]\n    },\n    'capital-m': {\n        leading: [ {x:5,y:95} ],\n        trailing: [ {x:195,y:95}, {x:195,y:5} ]\n    },\n    'capital-n': {\n        leading: [ {x:5,y:5}, {x:5,y:95} ],\n        trailing: [ {x:95,y:95}, {x:95,y:5} ]\n    },\n    'capital-o': {\n        leading: [ {x:20,y:95}, {x:20,y:5} ],\n        trailing: [ {x:60,y:95}, {x:60,y:5} ]\n    },\n    'capital-p': {\n        leading: [ {x:5,y:95}, {x:5,y:55}, {x:5,y:5} ],\n        trailing: [ {x:45,y:5}, {x:45,y:55}, {x:5,y:5} ]\n    },\n    'capital-q': {\n        leading: [ {x:20,y:80}, {x:20,y:5} ],\n        trailing: [ {x:80,y:95}, {x:60,y:5} ]\n    },\n    'capital-r': {\n        leading: [ {x:5,y:95}, {x:5,y:55}, {x:5,y:5} ],\n        trailing: [ {x:60,y:95}, {x:45,y:5}, {x:45,y:55} ]\n    },\n    'capital-s': {\n        leading: [ {x:20,y:95}, {x:20,y:5} ],\n        trailing: [ {x:20,y:95}, {x:60,y:95} ]\n    },\n    'capital-t': {\n        leading: [ {x:5, y:5}, {x:50,y:95} ],\n        trailing: [ {x:95,y:5}, {x:50,y:95} ]\n    },\n    'capital-u': {\n        leading: [ {x:5,y:5}, {x:20,y:95} ],\n        trailing: [ {x:75,y:5}, {x:60,y:95} ]\n    },\n    'capital-v': {\n        leading: [ {x:5,y:5}, {x:5,y:95} ],\n        trailing: [ {x:95,y:5}, {x:5,y:5} ]\n    },\n    'capital-w': {\n        leading: [ {x:5,y:5} ],\n        trailing: [ {x:195,y:5}, {x:95,y:95} ]\n    },\n    'capital-x': {\n        leading: [ {x:5,y:95}, {x:5,y:5} ],\n        trailing: [ {x:95,y:95}, {x:95,y:5} ]\n    },\n    'capital-y': {\n        leading: [ {x:5,y:5}, {x:50,y:95} ],\n        trailing: [ {x:95,y:5}, {x:50,y:95} ]\n    },\n    'capital-z': {\n        leading: [ {x:5,y:5}, {x:5,y:95} ],\n        trailing: [ {x:95,y:95}, {x:95,y:5} ]\n    },\n    'a': {\n        leading: [ {x:20,y:95}, {x:20,y:45} ],\n        trailing: [ {x:55,y:95}, {x:55,y:45} ]\n    },\n    'b': {\n        leading: [ {x:5,y:5}, {x:5,y:95}, {x:5,y:45} ],\n        trailing: [ {x:40,y:95}, {x:55,y:80} ]\n    },\n    'c': {\n        leading: [ {x:15,y:95}, {x:15,y:45} ],\n        trailing: [ {x:45,y:95}, {x:45,y:45} ]\n    },\n    'd': {\n        leading: [ {x:20,y:95}, {x:20,y:45} ],\n        trailing: [ {x:55,y:5}, {x:55,y:95}, {x:55,y:45} ]\n    },\n    'e': {\n        leading: [ {x:20,y:95}, {x:15,y:45} ],\n        trailing: [ {x:55,y:95}, {x:45,y:45} ]\n    },\n    'f': {\n        leading: [ {x:5,y:95}, {x:5,y:45}, {x:15,y:10} ],\n        trailing: [ {x:25,y:45}, {x:5,y:95}, {x:25,y:10} ]\n    },\n    'g': {\n        leading: [ {x:15,y:95}, {x:15,y:45} ],\n        trailing: [ {x:55,y:45}, {x:45,y:95} ]\n    },\n    'h': {\n        leading: [ {x:5,y:95}, {x:5,y:45}, {x:5,y:5} ],\n        trailing: [ {x:55,y:60}, {x:55,y:95}, {x:40,y:45} ]\n    },\n    'i': {\n        leading: [ {x:10,y:95}, {x:10,y:45}  ],\n        trailing: [ {x:10,y:95}, {x:10,y:45} ],\n    },\n    'j': {\n        leading: [ {x:35,y:45}, {x:35,y:95} ],\n        trailing: [ {x:35,y:45}, {x:35,y:95} ]\n    },\n    'k': {\n        leading: [ {x:5,y:95}, {x:5,y:65}, {x:5,y:5} ],\n        trailing: [ {x:50,y:95}, {x:45,y:25} ]\n    },\n    'l': {\n        leading: [ {x:15,y:95}, {x:5,y:5} ],\n        trailing: [ {x:25,y:95} ]\n    },\n    'm': {\n        leading: [ {x:5,y:95} ],\n        trailing: [ {x:105,y:95}, {x:105,y:45} ]\n    },\n    'n': {\n        leading: [ {x:5,y:95}, {x:5,y:45} ],\n        trailing: [ {x:55,y:95}, {x:35,y:45} ]\n    },\n    'o': {\n        leading: [ {x:20,y:95}, {x:20,y:45} ],\n        trailing: [ {x:40,y:95}, {x:40,y:45} ]\n    },\n    'p': {\n        leading: [ {x:5,y:95}, {x:5,y:45} ],\n        trailing: [ {x:40,y:95}, {x:40,y:45} ]\n    },\n    'q': {\n        leading: [ {x:20,y:95}, {x:20,y:45} ],\n        trailing: [ {x:55,y:95}, {x:55,y:45} ]\n    },\n    'r': {\n        leading: [ {x:5,y:95}, {x:5,y:45} ],\n        trailing: [ {x:45,y:45} ]\n    },\n    's': {\n        leading: [ {x:15,y:95}, {x:15,y:45} ],\n        trailing: [ {x:55,y:95}, {x:45,y:45} ]\n    },\n    't': {\n        leading: [ {x:5,y:45}, {x:15,y:95}, {x:5,y:5} ],\n        trailing: [ {x:25,y:45}, {x:25,y:95}, {x:5,y:5} ]\n    },\n    'u': {\n        leading: [ {x:5,y:45}, {x:20,y:95} ],\n        trailing: [ {x:55,y:45}, {x:55,y:95} ]\n    },\n    'v': {\n        leading: [ {x:5,y:45}, {x:5,y:95} ],\n        trailing: [ {x:55,y:45}, {x:5,y:5} ]\n    },\n    'w': {\n        leading: [ {x:5,y:45}, {x:5,y:95} ],\n        trailing: [ {x:105,y:45}, {x:55,y:95} ]\n    },\n    'x': {\n        leading: [ {x:5,y:95}, {x:5,y:45} ],\n        trailing: [ {x:55,y:45}, {x:55,y:95} ]\n    },\n    'y': {\n        leading: [ {x:5,y:45}, {x:15,y:95} ],\n        trailing: [ {x:55,y:45}, {x:45,y:95} ]\n    },\n    'z': {\n        leading: [ {x:5,y:45}, {x:5,y:95} ],\n        trailing: [ {x:55,y:95}, {x:55,y:45} ]\n    },\n};\n\n// Function to modify SVG content to make it responsive and theme-aware\nfunction makeSvgResponsive(svgContent: string): string {\n    return svgContent\n        .replace(/<rect([^>]*)fill=\"white\"/, '<rect$1fill=\"var(--bg-color)\"')\n        .replace(/<text([^>]*?)>([^<]*)<\\/text>/g, '<text$1 fill=\"var(--text-color)\">$2</text>')\n        .replace(/<svg([^>]*)/, '<svg$1 class=\"tile-svg-content\"')\n        .replace(/stroke=\"black\"/g, 'stroke=\"var(--text-color)\"');\n}\n\n// Function to download a combined SVG element\nfunction downloadPermutationAsSVG(svgElement: SVGSVGElement, word: string): void {\n    // Convert SVG to a data URI\n    const svgData = new XMLSerializer().serializeToString(svgElement);\n    const svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\n    const svgUrl = URL.createObjectURL(svgBlob);\n    \n    // Create a download link\n    const downloadLink = document.createElement('a');\n    downloadLink.href = svgUrl;\n    downloadLink.download = `${word.replace(/\\s+/g, '-')}.svg`;\n    \n    // Trigger download\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n    \n    // Clean up the URL object\n    setTimeout(() => {\n        URL.revokeObjectURL(svgUrl);\n    }, 100);\n}\n\n// Function to create a shareable URL and copy to clipboard\nfunction shareUrl(word: string): void {\n    // Get current picker/checkbox values\n    const bgColorPicker = document.getElementById('bg-color-picker') as HTMLInputElement;\n    const bgTransparent = document.getElementById('bg-transparent') as HTMLInputElement;\n    const mainColorPicker = document.getElementById('main-color-picker') as HTMLInputElement;\n    const bgColor = bgColorPicker ? bgColorPicker.value.slice(1) : '';\n    const mainColor = mainColorPicker ? mainColorPicker.value.slice(1) : '';\n    const bgTransparentVal = bgTransparent ? (bgTransparent.checked ? 'true' : 'false') : 'false';\n\n    // Create URL with all params\n    const url = new URL(window.location.href);\n    url.search = new URLSearchParams({\n        word,\n        bgColor,\n        mainColor,\n        bgTransparent: bgTransparentVal\n    }).toString();\n\n    navigator.clipboard.writeText(url.toString())\n        .then(() => {\n            const toast = document.getElementById('toast');\n            if (toast) {\n                toast.classList.add('show');\n                setTimeout(() => {\n                    toast.classList.remove('show');\n                }, 3000);\n            }\n        })\n        .catch(err => {\n            console.error('Failed to copy URL: ', err);\n            alert('Failed to copy the share link to clipboard.');\n        });\n}\n\n// Theme management\nfunction setTheme(theme: 'light' | 'dark'): void {\n    if (theme === 'dark') {\n        document.body.classList.add('dark-mode');\n    } else {\n        document.body.classList.remove('dark-mode');\n    }\n}\n\n// Function to get URL query parameters\nfunction getQueryParam(param: string): string | null {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.get(param);\n}\n\nfunction getAllQueryParams(): Record<string, string> {\n    const urlParams = new URLSearchParams(window.location.search);\n    const params: Record<string, string> = {};\n    urlParams.forEach((value, key) => {\n        params[key] = value;\n    });\n    return params;\n}\n\nfunction replaceSvgColors(svgElement: SVGSVGElement, newStroke: string, newFill: string): void {\n  // Select all elements with stroke or fill attributes\n  const elements = svgElement.querySelectorAll('[stroke], [fill]');\n  elements.forEach(el => {\n    if (el.hasAttribute('stroke') && el.getAttribute('stroke') !== 'none') {\n      el.setAttribute('stroke', newStroke);\n    }\n    if (el.hasAttribute('fill') && el.getAttribute('fill') !== 'none') {\n      el.setAttribute('fill', newFill);\n    }\n  });\n}\n\nfunction createChipConnection(chipGroup: SVGGElement, leading: boolean, letter: { letter: string, x: number, width: number, height: number, yOffset: number }, offsetX: number): void {\n    if (letter === undefined) {\n        return;\n    }\n    // Get first coordinate of letter from letterKeyCoords map (leading or trailing)\n    const letterKey = letter.letter === letter.letter.toUpperCase() \n        ? `capital-${letter.letter.toLowerCase()}` \n        : letter.letter.toLowerCase();\n    const letterCoords = letterKeyCoords[letterKey];\n    const coord = leading ? letterCoords.leading[0] : letterCoords.trailing[0];\n    if (!coord) return; // No coordinate found\n\n    let polylineId;\n    let circleId;\n    if (coord.y < 45) { // top\n        polylineId = leading ? 'left-top-line' : 'right-top-line';\n        circleId = leading ? 'left-top-circle' : 'right-top-circle';\n    } else if (coord.y === 45) { // middle\n        polylineId = leading ? 'left-middle-line' : 'right-middle-line';\n        circleId = leading ? 'left-middle-circle' : 'right-middle-circle';\n    } else { // bottom\n        polylineId = leading ? 'left-bottom-line' : 'right-bottom-line';\n        circleId = leading ? 'left-bottom-circle' : 'right-bottom-circle';\n    }\n    const polyline = chipGroup.querySelector(`#${polylineId}`) as SVGPolylineElement | null;\n    if (!polyline) return;\n    const points = polyline.getAttribute('points');\n    if (!points) return;\n    const pointsArray = points.split(' ').map(pt => {\n        const [x, y] = pt.split(',').map(Number);\n        return { x, y };\n    });\n    if (pointsArray.length === 0) return; // No points found\n\n    const lastCoords = pointsArray[pointsArray.length - 1];\n    const diff = leading ? coord.x : -(letter.width - coord.x);\n    const x = lastCoords.x + diff + offsetX;\n    polyline.setAttribute('points', points + ` ${x},${lastCoords.y}`);\n\n    const circle = chipGroup.querySelector(`#${circleId}`) as SVGPolylineElement | null;\n    if (!circle?.parentNode) return;\n    circle.parentNode.removeChild(circle);\n}\n\n// Function to create connecting rectangles between adjacent letters in a word\nfunction createLetterConnections(wordGroup: SVGGElement, letterElements: Array<{ letter: string, x: number, width: number, height: number, yOffset: number }>, selectedMainColor: string): void {\n    for (let i = 0; i < letterElements.length - 1; i++) {\n        const currentLetter = letterElements[i];\n        const nextLetter = letterElements[i + 1];\n        \n        // Get the letter key for coordinate lookup\n        const currentLetterKey = currentLetter.letter === currentLetter.letter.toUpperCase() \n            ? `capital-${currentLetter.letter.toLowerCase()}` \n            : currentLetter.letter.toLowerCase();\n        const nextLetterKey = nextLetter.letter === nextLetter.letter.toUpperCase() \n            ? `capital-${nextLetter.letter.toLowerCase()}` \n            : nextLetter.letter.toLowerCase();\n        \n        // Get coordinates from the letterKeyCoords map\n        const currentCoords = letterKeyCoords[currentLetterKey];\n        const nextCoords = letterKeyCoords[nextLetterKey];\n        \n        if (!currentCoords || !nextCoords) {\n            continue; // Skip if coordinates not found\n        }\n        \n        // Find the first matching Y coordinate between trailing (current) and leading (next)\n        let connectionFound = false;\n        for (const trailingCoord of currentCoords.trailing) {\n            for (const leadingCoord of nextCoords.leading) {\n                if (trailingCoord.y === leadingCoord.y) {\n                    // Create connecting rectangle\n                    const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n                    \n                    // Calculate positions (adjusting for letter positions in the combined SVG)\n                    const startX = currentLetter.x + trailingCoord.x;\n                    const endX = nextLetter.x + leadingCoord.x;\n                    // Apply the same vertical centering offset as the letters\n                    const y = currentLetter.yOffset + trailingCoord.y - 2.5; // Center the 5px height rectangle on the Y coordinate\n                    \n                    rect.setAttribute('x', startX.toString());\n                    rect.setAttribute('y', y.toString());\n                    rect.setAttribute('width', (endX - startX).toString());\n                    rect.setAttribute('height', '5');\n                    rect.setAttribute('fill', selectedMainColor);\n                    rect.setAttribute('filter', 'url(#glow)');\n                    \n                    wordGroup.appendChild(rect);\n                    connectionFound = true;\n                    break;\n                }\n            }\n            if (connectionFound) break;\n        }\n    }\n}\n\n// Global SVG cache for chips\nlet leftSvgContent: string | null = null;\nlet rightSvgContent: string | null = null;\n\n// Function to process word input\nfunction processWordInput(word: string, elementContainer: HTMLElement, resultDiv: HTMLElement): void {\n    // Get colour picker values\n    const bgColorPicker = document.getElementById('bg-color-picker') as HTMLInputElement;\n    const bgTransparent = document.getElementById('bg-transparent') as HTMLInputElement;\n    const mainColorPicker = document.getElementById('main-color-picker') as HTMLInputElement;\n    const selectedBgColor = bgColorPicker ? bgColorPicker.value : '#ffffff';\n    const selectedMainColor = mainColorPicker ? mainColorPicker.value : '#0055aa';\n    const isBgTransparent = bgTransparent ? bgTransparent.checked : true;\n    // Clear previous results\n    elementContainer.innerHTML = '';\n    resultDiv.textContent = '';\n\n    const shareButton = document.getElementById('share-button') as HTMLButtonElement;\n    if (shareButton) {\n        shareButton.disabled = true;\n    }\n\n    if (!word) {\n        return;\n    }\n\n    if (word && word.length > 0) {\n        resultDiv.textContent = ``;\n        if (shareButton) {\n            shareButton.disabled = false;\n        }\n\n        // Only process the first permutation (since convertToTiles returns one)\n        // const tilePath = tilePermutations[0];\n        const svgCache: Record<string, string> = {};\n\n        // Load all SVGs for the letters in the word\n        const loadPromises = word.split('').map(letter => {//tilePath.map(letter => {\n            if (letter === ' ') {\n                return Promise.resolve({ element: ' ', isSpace: true as const });\n            }\n            const fetchLetter = letter === letter.toUpperCase() ? `capital-${letter.toLowerCase()}` : letter;\n            if (svgCache[fetchLetter]) {\n                return Promise.resolve({ element: fetchLetter, svgContent: svgCache[fetchLetter] });\n            }\n            return fetch(`./letters/${fetchLetter}.svg`)\n                .then(response => {\n                    if (!response.ok) throw new Error(`SVG for ${letter} not found`);\n                    return response.text();\n                })\n                .then(svgContent => {\n                    svgCache[fetchLetter] = svgContent;\n                    return { element: fetchLetter, svgContent };\n                })\n                .catch(error => {\n                    console.error(error);\n                    return { element: fetchLetter, error: true as const };\n                });\n        });\n\n        Promise.all(loadPromises).then((results: Array<{ element: string; svgContent?: string; isSpace?: true; error?: true }>) => {\n            // If any error, show error and return\n            if (results.some(r => r.error)) {\n                resultDiv.textContent = `Error loading one or more SVG tiles.`;\n                return;\n            }\n\n            // Group SVGs by words\n            const words: Array<Array<string>> = [];\n            let currentWord: Array<string> = [];\n            results.forEach(r => {\n                if (r.isSpace) {\n                    if (currentWord.length > 0) {\n                        words.push(currentWord);\n                        currentWord = [];\n                    }\n                } else if (r.svgContent) {\n                    currentWord.push(r.svgContent);\n                }\n            });\n            if (currentWord.length > 0) {\n                words.push(currentWord);\n            }\n\n            // Create a temporary container to mimic the structure expected by downloadPermutationAsSVG\n            const permutationRow = document.createElement('div');\n            permutationRow.className = 'permutation-row';\n            words.forEach(wordSvgs => {\n                const wordDiv = document.createElement('div');\n                wordDiv.className = 'tile-word';\n                wordSvgs.forEach(svgContent => {\n                    const svgDiv = document.createElement('div');\n                    svgDiv.className = 'tile-svg';\n                    svgDiv.innerHTML = makeSvgResponsive(svgContent);\n                    wordDiv.appendChild(svgDiv);\n                });\n                permutationRow.appendChild(wordDiv);\n            });\n\n            // --- Begin: Generate combined SVG ---\n            // Get all word containers in the permutation row\n            const wordContainers = permutationRow.querySelectorAll('.tile-word');\n            const allSvgElements = permutationRow.querySelectorAll('.tile-svg-content');\n            if (!wordContainers.length || !allSvgElements.length) {\n                resultDiv.textContent = `No SVG tiles to display.`;\n                return;\n            }\n\n            // Helper function to get SVG dimensions from string content\n            const getSvgDimensionsFromString = (svgContent: string): { width: number, height: number } => {\n                const parser = new DOMParser();\n                const svgDoc = parser.parseFromString(svgContent, 'image/svg+xml');\n                const originalSvg = svgDoc.documentElement;\n                let width = parseFloat(originalSvg.getAttribute('width') || '0');\n                let height = parseFloat(originalSvg.getAttribute('height') || '0');\n                if (width === 0 || height === 0) {\n                    const viewBox = originalSvg.getAttribute('viewBox');\n                    if (viewBox) {\n                        const parts = viewBox.split(/\\s+|,/).map(parseFloat);\n                        if (parts.length === 4) {\n                            width = parts[2];\n                            height = parts[3];\n                        }\n                    }\n                }\n                if (width === 0) width = 100;\n                if (height === 0) height = 100;\n                return { width, height };\n            };\n\n            // Get chip dimensions from cached content\n            let leftChipWidth = 0, leftChipHeight = 0, rightChipWidth = 0, rightChipHeight = 0;\n            if (leftSvgContent) {\n               const leftDims = getSvgDimensionsFromString(leftSvgContent);\n                leftChipWidth = leftDims.width;\n                leftChipHeight = leftDims.height;\n            }\n            if (rightSvgContent) {\n                const rightDims = getSvgDimensionsFromString(rightSvgContent);\n                rightChipWidth = rightDims.width;\n                rightChipHeight = rightDims.height;\n            }\n\n            let totalWidth = 0;\n            let maxHeight = 0;\n            let wordCount = 0;\n            \n            // Calculate max height including chips and letter tiles\n            allSvgElements.forEach((svg: Element) => {\n                const svgElement = svg as SVGSVGElement;\n                const svgElementAsString = new XMLSerializer().serializeToString(svgElement);\n                const { height } = getSvgDimensionsFromString(svgElementAsString);\n                maxHeight = Math.max(maxHeight, height);\n            });\n            maxHeight = Math.max(maxHeight, leftChipHeight, rightChipHeight);\n            \n            // Calculate total width of letter tiles with spacing\n            wordContainers.forEach((wordContainer) => {\n                const wordSvgElements = wordContainer.querySelectorAll('.tile-svg-content');\n                if (wordSvgElements.length > 0) {\n                    wordCount++;\n                    let wordWidth = 0;\n                    wordSvgElements.forEach((svg: Element) => {\n                        const svgElement = svg as SVGSVGElement;\n                        const svgElementAsString = new XMLSerializer().serializeToString(svgElement);\n                        const { width } = getSvgDimensionsFromString(svgElementAsString);\n                        wordWidth += width;\n                    });\n                    wordWidth += (wordSvgElements.length - 1) * 10; // spacing between letters in word\n                    totalWidth += wordWidth;\n                }\n            });\n            \n            const SPACE_WIDTH = 50; // Space between words\n\n            // Add spacing between words\n            if (wordCount > 1) {\n                totalWidth += (wordCount - 1) * (SPACE_WIDTH + 10); // SPACE_WIDTH between words + spacing between letters in word\n            }\n            \n            // Calculate actual total width with both chips overlapping into the text area\n            // Left chip overlaps 190px into the letters area, right chip overlaps 150px into letters area\n            const leftChipOverlap = 220;\n            const rightChipOverlap = 210;\n            const lettersWidth = totalWidth + 20; // letters + padding (10px each side)\n            const actualTotalWidth = (leftChipWidth - leftChipOverlap) + lettersWidth + (rightChipWidth - rightChipOverlap - (leftChipOverlap/2));\n            \n            // Add padding for height\n            const actualMaxHeight = maxHeight + 20; // 10px padding top and bottom\n\n            const combinedSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n            combinedSvg.setAttribute('width', actualTotalWidth.toString());\n            combinedSvg.setAttribute('height', actualMaxHeight.toString());\n            combinedSvg.setAttribute('viewBox', `0 0 ${actualTotalWidth} ${actualMaxHeight}`);\n            combinedSvg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n            combinedSvg.classList.add('combined-svg');\n            \n            // Add glow filter definition\n            const defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');\n            const filter = document.createElementNS('http://www.w3.org/2000/svg', 'filter');\n            filter.setAttribute('id', 'glow');\n            filter.setAttribute('x', '-50%');\n            filter.setAttribute('y', '-50%');\n            filter.setAttribute('width', '200%');\n            filter.setAttribute('height', '200%');\n            \n            const feGaussianBlur = document.createElementNS('http://www.w3.org/2000/svg', 'feGaussianBlur');\n            feGaussianBlur.setAttribute('stdDeviation', '2');\n            feGaussianBlur.setAttribute('result', 'coloredBlur');\n            \n            const feMerge = document.createElementNS('http://www.w3.org/2000/svg', 'feMerge');\n            const feMergeNode1 = document.createElementNS('http://www.w3.org/2000/svg', 'feMergeNode');\n            feMergeNode1.setAttribute('in', 'coloredBlur');\n            const feMergeNode2 = document.createElementNS('http://www.w3.org/2000/svg', 'feMergeNode');\n            feMergeNode2.setAttribute('in', 'SourceGraphic');\n            \n            feMerge.appendChild(feMergeNode1);\n            feMerge.appendChild(feMergeNode2);\n            filter.appendChild(feGaussianBlur);\n            filter.appendChild(feMerge);\n            defs.appendChild(filter);\n            combinedSvg.appendChild(defs);\n            \n            const group = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n            let currentX = 10 + leftChipOverlap; // Start with padding plus left chip overlap offset\n            // Track word information for letter connections\n            const wordInfos: Array<Array<{ letter: string, x: number, width: number, height: number, yOffset: number }>> = [];\n            let wordIndex = 0;\n            \n            wordContainers.forEach((wordContainer) => {\n                const wordSvgElements = wordContainer.querySelectorAll('.tile-svg-content');\n                if (wordSvgElements.length === 0) return;\n                const wordGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n                group.appendChild(wordGroup);\n                const wordStartX = currentX;\n                let wordCurrentX = 0;\n                const currentWordInfo: Array<{ letter: string, x: number, width: number, height: number, yOffset: number }> = [];\n                \n                wordSvgElements.forEach((svg: Element, letterIndex: number) => {\n                    const svgElement = svg as SVGSVGElement;\n                    const svgElementAsString = new XMLSerializer().serializeToString(svgElement);\n                    const { width, height } = getSvgDimensionsFromString(svgElementAsString);\n                    const svgString = new XMLSerializer().serializeToString(svgElement);\n                    const parser = new DOMParser();\n                    const svgDoc = parser.parseFromString(svgString, 'image/svg+xml');\n                    const originalSvg = svgDoc.documentElement;\n                    let contentElement = originalSvg.querySelector('g');\n                    const elementX = wordStartX + wordCurrentX;\n                    const yOffset = (actualMaxHeight - height) / 2; // Calculate the vertical centering offset\n                    \n                    // Store letter info for connections\n                    const letterChar = word.split(' ')[wordIndex][letterIndex];\n                    currentWordInfo.push({\n                        letter: letterChar,\n                        x: elementX,\n                        width: width,\n                        height: height,\n                        yOffset: yOffset\n                    });\n                    \n                    if (contentElement) {\n                        const clonedContent = contentElement.cloneNode(true) as Element;\n                        const currentTransform = clonedContent.getAttribute('transform') || '';\n                        clonedContent.setAttribute('transform', \n                            `translate(${elementX}, ${yOffset}) ${currentTransform}`);\n                        wordGroup.appendChild(clonedContent);\n                    } else {\n                        const newGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n                        newGroup.setAttribute('transform', `translate(${elementX}, ${yOffset})`);\n                        Array.from(originalSvg.childNodes).forEach(child => {\n                            if (child.nodeType === Node.ELEMENT_NODE && (child as Element).tagName.toLowerCase() !== 'svg') {\n                                const importedNode = document.importNode(child, true);\n                                newGroup.appendChild(importedNode);\n                            }\n                        });\n                        wordGroup.appendChild(newGroup);\n                    }\n                    wordCurrentX += width + 10;\n                });\n                \n                // Create connections for this word\n                createLetterConnections(wordGroup, currentWordInfo, selectedMainColor);\n                wordInfos.push(currentWordInfo);\n                currentX += wordCurrentX + SPACE_WIDTH;\n                wordIndex++;\n            });\n            combinedSvg.appendChild(group);\n\n            if (allSvgElements.length > 0 && leftSvgContent && rightSvgContent) {\n                // Insert left.svg and right.svg content with original overlap positioning\n                const leftParser = new DOMParser();\n                const leftDoc = leftParser.parseFromString(leftSvgContent, 'image/svg+xml');\n                const leftGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n                // Position left chip at start of viewBox (no negative coordinates)\n                leftGroup.setAttribute('transform', `translate(0, ${(actualMaxHeight - leftChipHeight) / 2})`);\n                Array.from(leftDoc.documentElement.childNodes).forEach(node => {\n                    if (node.nodeType === Node.ELEMENT_NODE) {\n                        leftGroup.appendChild(document.importNode(node, true));\n                    }\n                });\n\n                const rightParser = new DOMParser();\n                const rightDoc = rightParser.parseFromString(rightSvgContent, 'image/svg+xml');\n                const rightGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n                // Position right chip with overlap, adjusted for new coordinate system\n                rightGroup.setAttribute('transform', `translate(${totalWidth + 20 - rightChipOverlap + leftChipOverlap}, ${(actualMaxHeight - rightChipHeight) / 2})`);\n                Array.from(rightDoc.documentElement.childNodes).forEach(node => {\n                    if (node.nodeType === Node.ELEMENT_NODE) {\n                        rightGroup.appendChild(document.importNode(node, true));\n                    }\n                });\n\n                // Insert both groups at the very beginning\n                combinedSvg.insertBefore(rightGroup, combinedSvg.firstChild);\n                combinedSvg.insertBefore(leftGroup, combinedSvg.firstChild);\n                replaceSvgColors(combinedSvg, selectedMainColor, selectedMainColor);\n                if (!isBgTransparent) {\n                    const bgRect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n                    // Background covers the entire viewBox area\n                    bgRect.setAttribute('x', '0');\n                    bgRect.setAttribute('y', '0');\n                    bgRect.setAttribute('width', actualTotalWidth.toString());\n                    bgRect.setAttribute('height', actualMaxHeight.toString());\n                    bgRect.setAttribute('fill', selectedBgColor);\n                    combinedSvg.insertBefore(bgRect, combinedSvg.firstChild);\n                }\n\n                // Get first leading coordinate of first letter from wordInfos - it may\n                const firstLetter = wordInfos[0][0];\n                let offsetX = 75;//leftChipOverlap;\n                createChipConnection(leftGroup, true, firstLetter, offsetX);\n                // Get first trailing coordinate of last letter\n                const lastWord = wordInfos[wordInfos.length - 1];\n                const lastLetter = lastWord === undefined ? firstLetter : lastWord[lastWord.length - 1];\n                offsetX = -85;//totalWidth-lettersWidth;// - leftChipOverlap - 10;\n                const chipX = totalWidth + 20 - rightChipOverlap + leftChipOverlap;\n                const lastLetterX = lastLetter.x + lastLetter.width;\n                createChipConnection(rightGroup, false, lastLetter, offsetX);\n            }\n            // replaceSvgColors(combinedSvg, selectedMainColor, selectedMainColor);\n            // --- End: Generate combined SVG ---\n\n            // Display the combined SVG in the container\n            elementContainer.innerHTML = '';\n            // elementContainer.style.maxWidth = '100%';\n            // elementContainer.style.overflowX = 'auto';\n            elementContainer.appendChild(combinedSvg);\n\n            // Add a single download button for the combined SVG\n            const downloadButton = document.createElement('button');\n            downloadButton.className = 'download-svg-button';\n            downloadButton.title = 'Download SVG';\n            downloadButton.innerHTML = `\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n                    <path d=\"M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z\"/>\n                    <path d=\"M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z\"/>\n                </svg>\n            `;\n            // downloadButton.style.position = 'relative';\n            downloadButton.style.display = 'block';\n            downloadButton.style.margin = '20px auto 0 auto';\n            elementContainer.appendChild(downloadButton);\n\n            // Download handler for combined SVG\n            downloadButton.addEventListener('click', () => {\n                downloadPermutationAsSVG(combinedSvg, word);\n            });\n        });\n    } else {\n        resultDiv.textContent = `\"${word}\" contains invalid characters. Only letters A-Z and spaces are allowed.`;\n        if (shareButton) {\n            shareButton.disabled = true;\n        }\n    }\n}\n\n// Initialize the application\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Preload left.svg and right.svg and store globally\n    Promise.all([\n        fetch('./chips/left.svg').then(r => r.ok ? r.text() : ''),\n        fetch('./chips/right.svg').then(r => r.ok ? r.text() : '')\n    ]).then(([left, right]) => {\n        leftSvgContent = left;\n        rightSvgContent = right;\n    });\n    // Wire up static colour pickers to re-render SVG on change\n    const bgColorPicker = document.getElementById('bg-color-picker') as HTMLInputElement;\n    const bgTransparent = document.getElementById('bg-transparent') as HTMLInputElement;\n    const mainColorPicker = document.getElementById('main-color-picker') as HTMLInputElement;\n\n    function rerenderSVG() {\n        processWordInput(wordInput.value.trim(), elementContainer, resultDiv);\n    }\n    if (bgColorPicker) bgColorPicker.addEventListener('input', rerenderSVG);\n    if (bgTransparent) bgTransparent.addEventListener('change', rerenderSVG);\n    if (mainColorPicker) mainColorPicker.addEventListener('input', rerenderSVG);\n    const form = document.getElementById('word-form') as HTMLFormElement;\n    const wordInput = document.getElementById('word-input') as HTMLInputElement;\n    const resultDiv = document.getElementById('result') as HTMLDivElement;\n    const elementContainer = document.getElementById('tile-container') as HTMLDivElement;\n    const themeRadios = document.querySelectorAll('input[name=\"theme\"]') as NodeListOf<HTMLInputElement>;\n    const shareButton = document.getElementById('share-button') as HTMLButtonElement;\n    \n    // Get all query params\n    const params = getAllQueryParams();\n    const wordFromParam = params.word || '';\n    const bgColorFromParam = params.bgColor;\n    const mainColorFromParam = params.mainColor;\n    const bgTransparentFromParam = params.bgTransparent;\n\n    // Set picker/checkbox values from query params if present\n    if (bgColorPicker && bgColorFromParam) bgColorPicker.value = `#${bgColorFromParam}`;\n    if (mainColorPicker && mainColorFromParam) mainColorPicker.value = `#${mainColorFromParam}`;\n    if (bgTransparent && typeof bgTransparentFromParam !== 'undefined') {\n        bgTransparent.checked = bgTransparentFromParam === '1' || bgTransparentFromParam.toLowerCase() === 'true';\n    }\n\n    // Set up theme toggle event listeners\n    themeRadios.forEach(radio => {\n        radio.addEventListener('change', (e) => {\n            const target = e.target as HTMLInputElement;\n            setTheme(target.value as 'light' | 'dark');\n        });\n    });\n\n    // Set up share button click handler\n    shareButton.addEventListener('click', () => {\n        // Only proceed if button is not disabled\n        if (!shareButton.disabled) {\n            const inputText = wordInput.value.trim();\n            if (inputText) {\n                shareUrl(inputText);\n            }\n        }\n    });\n\n    // Prevent default form submission but still keep the form for accessibility\n    form.addEventListener('submit', (e) => {\n        e.preventDefault();\n    });\n\n    // Process input as user types\n    wordInput.addEventListener('input', () => {\n        const inputText = wordInput.value.trim();\n        processWordInput(inputText, elementContainer, resultDiv);\n    });\n\n    // If there's a word parameter in the URL, use it to auto-populate input field\n    if (wordFromParam) {\n        wordInput.value = wordFromParam;\n        processWordInput(wordFromParam, elementContainer, resultDiv);\n    } else {\n        // Ensure share button is disabled initially\n        shareButton.disabled = true;\n    }\n});\n"],
  "mappings": "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",
  "names": ["x"]
}
